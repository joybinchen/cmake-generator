#!/usr/bin/env python3
import os
import sys
import argparse
import subprocess
import logging
from cmake_generator.json2cmake.utils import get_loggers
from cmake_generator.json2cmake.database import CompilationDatabase
from cmake_generator.json2cmake.converter import CmakeConverter

logger, info, debug, warn, error = get_loggers(__name__)
FORMAT = '%(levelname)-8s %(module)s:%(lineno)5d %(message)s'
#logging.basicConfig(format=FORMAT, level=logging.INFO)


def get_default_name(compilation_database):
    filename = os.path.realpath(compilation_database.name)
    if not os.path.isfile(filename):
        return 'autogenerated'
    directory = os.path.dirname(filename)
    try:
        output = subprocess.Popen(
            ['git', 'rev-parse', '--show-toplevel'],
            cwd=directory, stdout=subprocess.PIPE).communicate()[0]
        output = output.strip()
        return os.path.basename(output).decode('utf-8')
    except Exception:
        return 'autogenerated'


def main():
    parser = argparse.ArgumentParser(description="""
        Convert a compile_commands.json file to a CMakeLists.txt file.
    """)

    infile = 'compile_commands.json' if os.isatty(sys.stdin.fileno()) else '-'
    parser.add_argument(
        'infile', nargs='?', type=argparse.FileType('r'), default=infile,
        help="""
path of the compilation database (default: compile_commands.json or stdin)
        """
    )
    outfile = 'CMakeLists.txt' if os.isatty(sys.stdout.fileno()) else '-'
    parser.add_argument(
        '-o', '--outfile', type=argparse.FileType('w'), default=outfile,
        help="""
path of the CMake file (default: CMakeLists.txt or stdout)
        """
    )

    parser.add_argument(
        '-n', '--name', help="""
name of the CMake project (default: taken from Git root, or 'autogenerated')
        """
    )
    parser.add_argument(
        '-d', '--debug', action='store_true', default=False, help="""
enable debug log output
        """
    )
    parser.add_argument(
        '-m', '--multiple-file', action='store_true', default=False, help="""
split CMakeLists.txt into multiple files in subdirectories,
according to the working directory when executing each build command.
        """
    )
    parser.add_argument(
        '-e', '--extra-infile', action='store', default='extra_commands.json',
        help="""
path of extra compilation database to put you hand writen commands,
which may be difficult to get automatically captured using a ld logger.
(default: extra_commands.json)
        """
    )
    args = parser.parse_args()
    if args.debug:
        logging.basicConfig(format=FORMAT, level=logging.DEBUG)
        logger.setLevel(logging.DEBUG)
    else:
        logging.basicConfig(format=FORMAT, level=logging.INFO)
        logger.setLevel(logging.INFO)

    if args.name is None:
        args.name = get_default_name(args.infile)

    db = CompilationDatabase(args.infile)
    db.read()
    if os.path.isfile(args.extra_infile):
        db.read(open(args.extra_infile, 'r'))
    single = not args.multiple_file
    cmake_converter = CmakeConverter(db, args.name, db.directory, single)
    cmake_converter.convert()


if __name__ == '__main__':
    main()
